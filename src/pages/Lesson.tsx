import { useParams, useNavigate } from "react-router-dom";
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import Icon from "@/components/ui/icon";
import ExerciseCard from "@/components/ExerciseCard";
import PronunciationPractice from "@/components/PronunciationPractice";

interface Exercise {
  type: "translation" | "audio";
  question: string;
  options: string[];
  correct: number;
  audio?: string;
}

const lessonData: Record<
  string,
  {
    title: string;
    exercises: Exercise[];
    words: Array<{ word: string; translation: string }>;
  }
> = {
  "1": {
    title: "–ë–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã",
    exercises: [
      {
        type: "translation",
        question: "–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è 'Hello'?",
        options: ["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞", "–°–ø–∞—Å–∏–±–æ", "–ò–∑–≤–∏–Ω–∏—Ç–µ"],
        correct: 0,
      },
      {
        type: "audio",
        question: "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–æ?",
        options: ["–•–æ—Ä–æ—à–æ", "–ü–ª–æ—Ö–æ", "–ë—ã—Å—Ç—Ä–æ", "–ú–µ–¥–ª–µ–Ω–Ω–æ"],
        correct: 0,
        audio: "Good",
      },
      {
        type: "translation",
        question: "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 'Thank you'",
        options: ["–ü–æ–∂–∞–ª—É–π—Å—Ç–∞", "–°–ø–∞—Å–∏–±–æ", "–ò–∑–≤–∏–Ω–∏—Ç–µ", "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è"],
        correct: 1,
      },
    ],
    words: [
      { word: "Hello", translation: "–ü—Ä–∏–≤–µ—Ç" },
      { word: "Good", translation: "–•–æ—Ä–æ—à–æ" },
      { word: "Thank you", translation: "–°–ø–∞—Å–∏–±–æ" },
    ],
  },
};

const Lesson = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [currentExercise, setCurrentExercise] = useState(0);
  const [currentWord, setCurrentWord] = useState(0);
  const [correctAnswers, setCorrectAnswers] = useState(0);
  const [showPronunciation, setShowPronunciation] = useState(false);
  const [isCompleted, setIsCompleted] = useState(false);

  const lesson = lessonData[id || "1"];

  if (!lesson) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50 flex items-center justify-center">
        <Card>
          <CardContent className="text-center p-8">
            <h2 className="text-xl font-bold mb-4">–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
            <Button onClick={() => navigate("/")}>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const totalExercises = lesson.exercises.length;
  const progress =
    ((currentExercise + (showPronunciation ? lesson.words.length : 0)) /
      (totalExercises + lesson.words.length)) *
    100;

  const handleAnswer = (isCorrect: boolean) => {
    if (isCorrect) {
      setCorrectAnswers((prev) => prev + 1);
    }

    if (currentExercise < totalExercises - 1) {
      setCurrentExercise((prev) => prev + 1);
    } else if (!showPronunciation) {
      setShowPronunciation(true);
      setCurrentWord(0);
    } else if (currentWord < lesson.words.length - 1) {
      setCurrentWord((prev) => prev + 1);
    } else {
      setIsCompleted(true);
    }
  };

  const handlePronunciationNext = () => {
    if (currentWord < lesson.words.length - 1) {
      setCurrentWord((prev) => prev + 1);
    } else {
      setIsCompleted(true);
    }
  };

  if (isCompleted) {
    const score = Math.round((correctAnswers / totalExercises) * 100);
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50">
        <div className="max-w-2xl mx-auto px-4 py-8">
          <Card className="text-center">
            <CardHeader>
              <CardTitle className="flex items-center justify-center gap-2">
                <Icon name="Trophy" size={24} className="text-yellow-500" />
                –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="text-6xl">üéâ</div>
              <div>
                <h3 className="text-2xl font-bold mb-2">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h3>
                <div className="text-4xl font-bold text-primary mb-4">
                  {score}%
                </div>
                <p className="text-muted-foreground">
                  –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correctAnswers} –∏–∑ {totalExercises}
                </p>
              </div>
              <div className="flex gap-4 justify-center">
                <Button onClick={() => window.location.reload()}>
                  <Icon name="RotateCcw" size={16} className="mr-2" />
                  –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞
                </Button>
                <Button variant="outline" onClick={() => navigate("/")}>
                  <Icon name="Home" size={16} className="mr-2" />
                  –ù–∞ –≥–ª–∞–≤–Ω—É—é
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-blue-50">
      <div className="max-w-4xl mx-auto px-4 py-8">
        {/* –®–∞–ø–∫–∞ */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              onClick={() => navigate("/")}
              className="flex items-center gap-2"
            >
              <Icon name="ArrowLeft" size={16} />
              –ù–∞–∑–∞–¥
            </Button>
            <div>
              <h1 className="text-2xl font-bold">{lesson.title}</h1>
              <p className="text-muted-foreground">–£—Ä–æ–∫ {id}</p>
            </div>
          </div>
          <Badge variant="outline">
            {showPronunciation ? "–ü—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ" : "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"}
          </Badge>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <span className="text-sm text-muted-foreground">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
            <span className="text-sm font-medium">{Math.round(progress)}%</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫–∞ */}
        <div className="space-y-8">
          {!showPronunciation ? (
            <ExerciseCard
              exercise={lesson.exercises[currentExercise]}
              onAnswer={handleAnswer}
            />
          ) : (
            <div className="space-y-6">
              <PronunciationPractice
                word={lesson.words[currentWord].word}
                translation={lesson.words[currentWord].translation}
              />
              <div className="flex justify-center">
                <Button onClick={handlePronunciationNext}>
                  {currentWord < lesson.words.length - 1
                    ? "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"
                    : "–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫"}
                  <Icon name="ArrowRight" size={16} className="ml-2" />
                </Button>
              </div>
            </div>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ */}
        <div className="mt-8 text-center text-sm text-muted-foreground">
          {!showPronunciation ? (
            <>
              –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {currentExercise + 1} –∏–∑ {totalExercises}
            </>
          ) : (
            <>
              –°–ª–æ–≤–æ {currentWord + 1} –∏–∑ {lesson.words.length}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Lesson;
